## ams_version=1.0

Model Main_Distribution_Flow {
	Section ExcelImport {
		StringParameter WorkbookName;
		Procedure ReadFromExcel {
			Body: {
				if not FileSelect(WorkbookName,extension:".xlsx") then
					return;
				endif;
				
				axll::CloseAllWorkBooks;
				axll::OpenWorkBook(WorkbookName);
				
				axll::SelectSheet("Location Type");
				axll::ReadList(p_locationType,"A2:B121","C2:C121",ModeForUnknownElements :  1); 
				
				axll::SelectSheet("Distances Between Locations");
				axll::ReadTable(p_distance, "A2:A122", "B1:DR1", "B2:DR122", 1);
				
				axll::SelectSheet("Demand");
				axll::ReadList(p_demand,"A2:B337","C2:C337",ModeForUnknownElements :  1); 
				
				axll::SelectSheet("Supply");
				axll::ReadList(p_supply,"A2:A6","B2:B6",ModeForUnknownElements :  1); 
				
				axll::SelectSheet("Stock");
				axll::ReadList(p_minStock,"A2:A9","B2:B9",ModeForUnknownElements :  1);
				axll::ReadList(p_maxStock,"A2:A9","C2:C9",ModeForUnknownElements :  1);
				axll::ReadList(p_startStock,"A2:A9","E2:E9",ModeForUnknownElements :  1);
				
				axll::SelectSheet("Coordinates");
				axll::ReadList(p_longitude,"A2:A122","B2:B122",ModeForUnknownElements :  1);
				axll::ReadList(p_latitude,"A2:A122","C2:C122",ModeForUnknownElements :  1);
				axll::ReadList(p_population,"A2:A122","D2:D122",ModeForUnknownElements :  1);
				
				axll::CloseAllWorkBooks;
			}
		}
	}
	Section ExcelData {
		Set s_locations {
			Index: l, m;
		}
		Set s_locationTypes {
			Index: typ;
		}
		Set s_time {
			Index: t;
		}
		Parameter p_locationType {
			IndexDomain: (l,typ);
			Range: binary;
		}
		Parameter p_distance {
			IndexDomain: (l,m);
		}
		Parameter p_demand {
			IndexDomain: (l,t);
		}
		Parameter p_supply {
			IndexDomain: l;
		}
		Parameter p_minStock {
			IndexDomain: l;
		}
		Parameter p_maxStock {
			IndexDomain: l;
		}
		Parameter p_startStock {
			IndexDomain: l;
		}
		Parameter p_transportCost {
			IndexDomain: (l,m);
			Definition: {
				if p_locationType(l,'Factory') and p_locationType(m,'NDC') then ! primary flow
					0.8
				elseif p_locationType(l,'NDC') and p_locationType(m,'RDC') then ! secondary flow
					1.2
				endif
			}
		}
		Parameter p_longitude {
			IndexDomain: l;
		}
		Parameter p_latitude {
			IndexDomain: l;
		}
		Parameter p_population {
			IndexDomain: l;
		}
	}
	Section MathModel {
		Parameter p_isArcAllowed {
			IndexDomain: (l,m);
			Definition: {
				p_locationType(l,'Factory') and p_locationType(m,'NDC') ! primary flow
				or
				p_locationType(l,'NDC') and p_locationType(m,'RDC')     ! secondary flow
			}
		}
		Variable v_transportation {
			IndexDomain: (l,m,t) | p_isArcAllowed(l,m);
			Range: nonnegative;
		}
		Variable v_production {
			IndexDomain: (l,t) | p_locationType(l,'Factory');
			Range: nonnegative;
		}
		Constraint c_supply {
			IndexDomain: (l,t);
			Definition: v_production(l,t) <= p_supply(l);
		}
		Constraint c_nodeEquilibrium {
			IndexDomain: (l,t);
			Definition: {
				! input = output
				v_production(l,t) + sum(m,v_transportation(m,l,t)) = sum(m,v_transportation(l,m,t)) + p_demand(l,t)
			}
		}
		Variable v_objectiveFunction {
			Range: free;
			Definition: sum((l,m,t),v_transportation(l,m,t) * p_distance(l,m) * p_transportCost(l,m));
		}
		MathematicalProgram mp_minCost {
			Objective: v_objectiveFunction;
			Direction: minimize;
			Constraints: AllConstraints;
			Variables: AllVariables;
			Type: Automatic;
		}
	}
	Procedure MainInitialization {
		Comment: "Add initialization statements here that do NOT require any library being initialized already.";
	}
	Procedure PostMainInitialization {
		Body: {
			ReadFromExcel;
		}
		Comment: {
			"Add initialization statements here that require that the libraries are already initialized properly,
			or add statements that require the Data Management module to be initialized."
		}
	}
	Procedure MainExecution {
		Body: {
			solve mp_minCost;
		}
	}
	Procedure PreMainTermination {
		Body: {
			return DataManagementExit();
		}
		Comment: {
			"Add termination statements here that require all libraries to be still alive.
			Return 1 if you allow the termination sequence to continue.
			Return 0 if you want to cancel the termination sequence."
		}
	}
	Procedure MainTermination {
		Body: {
			return 1;
		}
		Comment: {
			"Add termination statements here that do not require all libraries to be still alive.
			Return 1 to allow the termination sequence to continue.
			Return 0 if you want to cancel the termination sequence.
			It is recommended to only use the procedure PreMainTermination to cancel the termination sequence and let this procedure always return 1."
		}
	}
	Section Quantities_and_Units {
		Comment: {
			"This section contains all the units and quantities that are added automatically by AIMMS.
			It is recommended to declare all your quantities here."
		}
		Quantity SI_Time_Duration {
			BaseUnit: s;
			Conversions: minute->s : #-># * 60;
			Comment: {
				"Expresses the value for the duration of periods.
				
				The unit s has been added automatically because it is a required unit for AimmsWebUI.
				
				The unit minute has been added automatically because it is a required unit for AimmsWebUI."
			}
		}
	}
}
